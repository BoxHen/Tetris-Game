global level scope:
is accessible from anywhere within the script from which it was created. It is declared at the the top most level and is accessible 
from within child scopes such as functions or statements.

Function level scope: 
is limited to within the function from which is was declared and any child scopes such as nested functions or statements. Variables 
with function level scope are not accessible outside the function they were declared.

Block level scope: 
is limited further to the statement or expression of which the variable was declared. Or in simple terms, anywhere between an 
opening and closing curly brace {}.

Let vs var:
The var keyword can declare variables at a global or function level scope but cannot give block level scope. This is where let comes 
in. All variables declared with let have block level scope, limiting its scope to the statement or expression from within which it 
is declared. When using let if says that the value will be reassigned but using const will mean the value is constant 

Const:
const cannot be reassigned entirely but in terms of objects, its properties can be changed.
The way I like to think about it with an object is that the person is me. I’m not going to ever change, my entire life, but attributes 
about me are going to change. Maybe my age, my hair color, where I live — things about me — are going to change. That’s fine, as long 
as the object that is assigned is always the exact same object

Arrow Fucntions: ("=>")
Arrow functions – also called “fat arrow” functions, from CoffeeScript — are a more concise syntax for writing function expressions.
	Reference: https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/

Tuples: 
Tuples are fixed size in nature whereas lists are dynamic. In other words, a tuple is immutable whereas a list is mutable.

destructuring assignment: 
syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.
var a, b, rest;

[a, b] = [10, 20];


console.log(a);
// expected output: 10


console.log(b);
// expected output: 20

undefined in JS:
JavaScript has the concept of coercing values. When you use the negation ("NOT") operator (!), the thing you're negating has to be a 
boolean, so it coerces its argument to boolean if it's not boolean already. The rules for doing that are defined by the specification: 
Basically, if the value is undefined, null, "", 0, or NaN, it coerces to false; otherwise, it coerces to true.
So !undefined is true because undefined coerces to false, and then ! negates it.

flooring a number:
we can use | 0 (bitwise or with a zero)
All bitwise operations except unsigned right shift, >>>, work on signed 32-bit integers. So using bitwise operations will convert a float to an integer.
	advantages   : faster
	disadvantages: Will not pass jsLint.
		       32-bit signed integers only
		       Odd Comparative behavior: Math.floor(NaN) === NaN, while (NaN | 0) === 0

strings vs arrays in javaScript:
Strings are not arrays because they are inheriting from different prototypes (*) and hence have different instance methods. For example, arrays have a 
method join and strings have a method match.
From one point of view, arrays and strings are similar though, because they are both array-like objects.
What does array-like mean? It means that the object has a length property and numeric properties. A string has a length property which gives you the 
number of characters in the string, and you can access single characters of the string with str[i].
reference: https://stackoverflow.com/questions/21808687/whats-the-difference-between-a-string-and-an-array-of-characters-in-javascript








